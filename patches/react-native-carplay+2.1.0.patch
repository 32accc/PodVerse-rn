diff --git a/node_modules/react-native-carplay/ios/RNCarPlay.m b/node_modules/react-native-carplay/ios/RNCarPlay.m
index 65a329c..ba96e90 100644
--- a/node_modules/react-native-carplay/ios/RNCarPlay.m
+++ b/node_modules/react-native-carplay/ios/RNCarPlay.m
@@ -1,6 +1,7 @@
 #import "RNCarPlay.h"
 #import <React/RCTConvert.h>
 #import <React/RCTRootView.h>
+#import <MediaPlayer/MediaPlayer.h>
 
 @implementation RNCarPlay
 
@@ -176,14 +177,18 @@ - (UIImage *)imageWithSize:(UIImage *)image convertToSize:(CGSize)size {
         CPVoiceControlTemplate *voiceTemplate = [[CPVoiceControlTemplate alloc] initWithVoiceControlStates: [self parseVoiceControlStates:config[@"voiceControlStates"]]];
         template = voiceTemplate;
     } else if ([type isEqualToString:@"nowplaying"]) {
+        MPNowPlayingInfoCenter *center = [MPNowPlayingInfoCenter defaultCenter];
+        
         CPNowPlayingTemplate *nowPlayingTemplate = [CPNowPlayingTemplate sharedTemplate];
         [nowPlayingTemplate setAlbumArtistButtonEnabled:[RCTConvert BOOL:config[@"albumArtistButton"]]];
         [nowPlayingTemplate setUpNextTitle:[RCTConvert NSString:config[@"upNextTitle"]]];
         [nowPlayingTemplate setUpNextButtonEnabled:[RCTConvert BOOL:config[@"upNextButton"]]];
+        center.playbackState = MPNowPlayingPlaybackStatePlaying;
         template = nowPlayingTemplate;
     } else if ([type isEqualToString:@"tabbar"]) {
         CPTabBarTemplate *tabBarTemplate = [[CPTabBarTemplate alloc] initWithTemplates:[self parseTemplatesFrom:config]];
         tabBarTemplate.delegate = self;
+
         template = tabBarTemplate;
     } else if ([type isEqualToString:@"contact"]) {
         CPContact *contact = [[CPContact alloc] init];
@@ -710,6 +715,14 @@ - (void) applyConfigForMapTemplate:(CPMapTemplate*)mapTemplate templateId:(NSStr
     for (NSDictionary *tpl in tpls) {
         CPTemplate *templ = [store findTemplateById:tpl[@"id"]];
         // @todo UITabSystemItem
+        if(tpl[@"config"][@"title"]) {
+            templ.tabTitle = tpl[@"config"][@"title"];
+        }
+        
+        if(tpl[@"config"][@"tabSystemImg"]) {
+            templ.tabImage = [UIImage systemImageNamed:tpl[@"config"][@"tabSystemImg"]];
+        }
+        
         [templates addObject:templ];
     }
     return templates;
@@ -793,18 +806,31 @@ - (void) applyConfigForMapTemplate:(CPMapTemplate*)mapTemplate templateId:(NSStr
     NSMutableArray *_items = [NSMutableArray array];
     int index = startIndex;
     for (NSDictionary *item in items) {
-        BOOL _showsDisclosureIndicator = [item objectForKey:@"showsDisclosureIndicator"];
+        BOOL _showsDisclosureIndicator = YES;
+        if ([item objectForKey:@"showsDisclosureIndicator"]) {
+            _showsDisclosureIndicator  = [RCTConvert BOOL:[item objectForKey:@"showsDisclosureIndicator"]];
+        }
         NSString *_detailText = [item objectForKey:@"detailText"];
         NSString *_text = [item objectForKey:@"text"];
         UIImage *_image = [RCTConvert UIImage:[item objectForKey:@"image"]];
         if (item[@"imgUrl"]) {
             _image = [[UIImage alloc] initWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:[RCTConvert NSString:item[@"imgUrl"]]]]];
         }
-        CPListItem *_item = [[CPListItem alloc] initWithText:_text detailText:_detailText image:_image showsDisclosureIndicator:_showsDisclosureIndicator];
+        
+        CPListItemAccessoryType accessory = _showsDisclosureIndicator == YES ?CPListItemAccessoryTypeDisclosureIndicator:CPListItemAccessoryTypeNone;
+        CPListItem *_item = [[CPListItem alloc] initWithText:_text detailText:_detailText image:_image accessoryImage:nil accessoryType:accessory];
         if ([item objectForKey:@"isPlaying"]) {
             [_item setPlaying:[RCTConvert BOOL:[item objectForKey:@"isPlaying"]]];
         }
-        [_item setUserInfo:@{ @"index": @(index) }];
+        
+        NSMutableDictionary *itemUserInfo = [@{} mutableCopy];
+        itemUserInfo[@"index"] = @(index);
+        
+        if ([item objectForKey:@"disabled"]) {
+            itemUserInfo[@"disabled"]  = @([RCTConvert BOOL:[item objectForKey:@"disabled"]]);
+        }
+        
+        [_item setUserInfo:itemUserInfo];
         [_items addObject:_item];
         index = index + 1;
     }
@@ -997,6 +1023,10 @@ - (void)sendTemplateEventWithName:(CPTemplate *)template name:(NSString*)name {
 
 - (void)sendTemplateEventWithName:(CPTemplate *)template name:(NSString*)name json:(NSDictionary*)json {
     NSMutableDictionary *body = [[NSMutableDictionary alloc] initWithDictionary:json];
+    if ([template isKindOfClass:CPNowPlayingTemplate.class]) {
+        [template setUserInfo:@{@"templateId": @"podverse.NowPlayingTemplate"}];
+    }
+    
     NSDictionary *userInfo = [template userInfo];
     [body setObject:[userInfo objectForKey:@"templateId"] forKey:@"templateId"];
     [self sendEventWithName:name body:body];
@@ -1102,7 +1132,13 @@ - (void)searchTemplate:(CPSearchTemplate *)searchTemplate updatedSearchText:(NSS
 
 - (void)listTemplate:(CPListTemplate *)listTemplate didSelectListItem:(CPListItem *)item completionHandler:(void (^)(void))completionHandler {
     NSNumber* index = [item.userInfo objectForKey:@"index"];
-    [self sendTemplateEventWithName:listTemplate name:@"didSelectListItem" json:@{ @"index": index }];
+    BOOL disabled = NO;
+    
+    if([item.userInfo objectForKey:@"disabled"]){
+        disabled = [[item.userInfo objectForKey:@"disabled"] boolValue];
+    }
+    
+    [self sendTemplateEventWithName:listTemplate name:@"didSelectListItem" json:@{ @"index": index, @"disabled": @(disabled) }];
     self.selectedResultBlock = completionHandler;
 }
 
diff --git a/node_modules/react-native-carplay/lib/interfaces/ListItem.d.ts b/node_modules/react-native-carplay/lib/interfaces/ListItem.d.ts
index 3616ae3..35087d1 100644
--- a/node_modules/react-native-carplay/lib/interfaces/ListItem.d.ts
+++ b/node_modules/react-native-carplay/lib/interfaces/ListItem.d.ts
@@ -26,4 +26,7 @@ export interface ListItem {
      * Is Playing flag.
      */
     isPlaying?: boolean;
+
+    /*extra details about cell*/
+    disabled?: boolean;
 }
diff --git a/node_modules/react-native-carplay/lib/templates/ListTemplate.d.ts b/node_modules/react-native-carplay/lib/templates/ListTemplate.d.ts
index 6c15102..3391f96 100644
--- a/node_modules/react-native-carplay/lib/templates/ListTemplate.d.ts
+++ b/node_modules/react-native-carplay/lib/templates/ListTemplate.d.ts
@@ -40,6 +40,7 @@ export interface ListTemplateConfig extends TemplateConfig {
      */
     onItemSelect?(item: {
         index: number;
+        disabled: boolean;
     }): Promise<void>;
     /**
      * Fired when the back button is pressed
diff --git a/node_modules/react-native-carplay/lib/templates/NowPlayingTemplate.js b/node_modules/react-native-carplay/lib/templates/NowPlayingTemplate.js
index 88bbaaa..a27ae0c 100644
--- a/node_modules/react-native-carplay/lib/templates/NowPlayingTemplate.js
+++ b/node_modules/react-native-carplay/lib/templates/NowPlayingTemplate.js
@@ -3,8 +3,20 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.NowPlayingTemplate = void 0;
 const Template_1 = require("./Template");
 class NowPlayingTemplate extends Template_1.Template {
+    constructor(config) {
+        super(config);
+        this.config = config;
+        
+    }
+
     get type() {
         return 'nowplaying';
     }
+
+    get eventMap() {
+        return {
+            backButtonPressed: 'onBackButtonPressed',
+        };
+    }
 }
 exports.NowPlayingTemplate = NowPlayingTemplate;
